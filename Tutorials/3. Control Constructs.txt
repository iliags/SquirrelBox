Last Updated: 04 Oct 2008
Dan Cook, shkaboinka@gmail.com
http://groups.google.com/group/ADSMBLG/


.------------------------.
|\||||||||||||||||||||||/|
|-+--------------------+-|
|-| 3.1 - Program Flow |-|
|-+--------------------+-|
|/||||||||||||||||||||||\|
'------------------------'


Without any control constructs in a program, execution flows from start to
finish, executing each instruction in order. This is useful for simple math
and conversion programs that do the exact same thing every time, but not much
else. This linear flow can be altered by using control constructs. These are
instructions that cause program flow to jump to, skip over, or even repeat
through different sections of code at one time.

The simplest control construct is the combination of the label and the goto
statement. A label simply marks a position in the code by giving it a name,
and the goto command tells the program which label to "go to". A label can
be given any name that is a valid identifier (see 2 about identifiers). Here
is an example:

==--=================================================
01  // EndlessLoop.ads - a program that never ends.
02
03  #define TI83_PLUS
04  #include "tios.ads"
05
06  void main() {
07      clrHome();
08      byte number = 0;
09      label top;
10      printNum(number);
11      printChar(' ');
11      number = number + 1;
12      goto top;
13      #asm "haha: CALL haha"; // Ignore this code
14  } // DO NOT TEST THIS PROGRAM: IT LOOPS FOREVER!!
==--=================================================

.----------------.     .----------------.
|0 1 2 3 4 5 6 7 |     |94 95 96 97 98 9|
|8 9 10 11 12 13 |     |9 100 101 102 10|
|14 15 16 17 18 1|     |3 104 105 106 10|
|9 20 21 22 23 24|     |7 108 109 110 11|
| 25 26 27 28 29 |     |1 112 113 114 11|
|30 31 32 33 34 3|     |5 116 117 118 11|
|5 36 37 38 39 40|     |9 120 121 122 12|
| 41 42 43 44 45 | ... |3 124 125 126 12|
'----------------'     '----------------'

NOTE: ignore line 13, which is not explained until section 6. I put it there
as a joke because the above program will never get to it; but that is almost
a good thing because that single instruction is a GREAT way to totally trash
your TIOS until you restart it - DO NOT TEST IT [and blame me for it later].

This program initializes the number byte with zero, prints it out, adds one to
it, and then repeats. This would seem like a good way to print out every value
possible (despite the cluttery appearance) -- but this program will never stop
repeating! Although the "linear flow" is changed into a loop, it still behaves
linearly: it does exactly the same thing every time it repeats. The ability to
redirect program flow serves no practical use without something conditional to
control it (On a side note, I am proud of my perfectly rectangular paragraph).


.---------------------------------.
|\|||||||||||||||||||||||||||||||/|
|-+-----------------------------+-|
|-| 3.2 - Conditional Execution |-|
|-+-----------------------------+-|
|/|||||||||||||||||||||||||||||||\|
'---------------------------------'


The previous example can be changed to stop at any number by altering the goto
statement so that it only jumps IF the number is less than some  limit. The
coding for this is very straight forward:

==--==========================================
01  // EndingLoop.ads - a program that ends.
02
03  #define "LIMIT" as "25" // For easy change
02
03  #define TI83_PLUS
04  #include "tios.ads"
05
06  void main() {
07      clrHome();
08      byte number = 0;
09      label top;
10      printNum(number);
11      printChar(' ');
11      number = number + 1;
12      goto top if(number < .LIMIT);
13      println();
14  } // REMEMBER: the . signifies a constant
==--==========================================

.----------------.
|0 1 2 3 4 5 6 7 |
|8 9 10 11 12 13 |
|14 15 16 17 18 1|
|9 20 21 22 23 24|
| 25             |
|            Done|
|                |
|                |
'----------------'

A conditional can be as simple as a single comparison between two values (or
expressions). The valid comparison operators are as follows:

== equal to
!= not equal to
<  less than
>  greater than
<= less than or equal to
>= greater than or equal to

Note that the == operator is DIFFERENT than the = operator: one asks "is this
equal to?" (comparison) and the other says "MAKE this equal to" (assignment).

The "if" statement is used to mark code that should be executed IF a condition
is true, and ignored otherwise.
Explain the need for such and introduce the "if" and "goto if" with SIMPLE examples.
Explain if-else. Get more detailed and explain comparisons in more detail along with
&&, ||, and !(). Explain a BIT of boolean logic !(A && B) -> (!A || !B). BRIEFLY
mention the boolean flags TRUE and FALSE (save the rest for section 6). 


.-------------------.
|\|||||||||||||||||/|
|-+---------------+-|
|-| 3.3 - Looping |-|
|-+---------------+-|
|/|||||||||||||||||\|
'-------------------'

Introduce while/until, do-while/do-until, for, and loop constructs with simple
examples so that it does not take all day.


.-----------------.
|\|||||||||||||||/|
|-+-------------+-|
|-| 3.4 - Scope |-|
|-+-------------+-|
|/|||||||||||||||\|
'-----------------'

Explain the scope of local variables within different contexts. Do not CALL them local
variables until global variables are explained. Explain the efficieny of being able to
define variables within one context and reuse the name in another. Mention that as more
variables are "recycled" in this way, better output code is generated (Do not explain
the code mutation involved more than a TAD, and do not call it that!)